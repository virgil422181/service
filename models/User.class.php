<?php// users db table: id, username, hash_password(md5), first_name, last_name, email, tip, status, time_stamp// table class method contruct with db and makeStatement with sql and date(placeholders for sql) as argumentsinclude_once "models/Table.class.php";class User extends Table{    /**     * Crete a new user in users table     *     * @param string $username 32 characters string     * @param string $password     * @param string $first_name     * @param string $last_name     * @param string $email     *     * @return boolean PDO::execute Returns TRUE on success or FALSE on failure     */    public function createUser($username, $password, $first_name, $last_name, $email, $tip, $status)    {        // user created with disable status        $this->checkUser($username);        $this->checkEmail($email);        $sql = "INSERT INTO users (username,hash_password,first_name,last_name,email,tip,status)"            . " VALUES( ?, MD5(?), ?, ?, ?, ?, ?)";        $date = array(            $username,            $password,            $first_name,            $last_name,            $email,            $tip,            $status        );        $this->makeStatement($sql, $date);        return TRUE;    }    public function updateUser($id, $username, $first_name, $last_name, $email, $tip, $status)    {        $sql = "UPDATE users SET username=?, first_name=?,last_name=?,email=?,tip=?,status=? WHERE id=?";        $date = array(            $username,            $first_name,            $last_name,            $email,            $tip,            $status,            $id        );        $statement = $this->makeStatement($sql, $date);        if ($statement->rowCount() === 1) {            return TRUE;        } else {            return FALSE;        }    }    public function updateUserPassword($id, $password)    {        $sql = "UPDATE users SET hash_password=MD5(?) WHERE id=?";        $date = array($password, $id);        $statement = $this->makeStatement($sql, $date);        if ($statement->rowCount() === 1) {            return TRUE;        } else {            return FALSE;        }    }    public function deleteUser($id)    {        $sql = "DELETE FROM users WHERE id=?";        $date = array($id);        $this->makeStatement($sql, $date);    }    /**     * Check user name (must be unique) -> private     *     * @param string $user     *     * @throws Exception     */    private function checkUser($user)    {        $sql = "SELECT username FROM users WHERE username = ?";        $data = array($user);        $this->makeStatement($sql, $data);        $statement = $this->makeStatement($sql, $data);        //if a user with that username is found in database        if ($statement->rowCount() === 1) {            //throw an exception > do NOT create new admin user            $e = new Exception("Error: '$user' already used!");            throw $e;        }    }    /**     * Check email (must be unique) -> private     *     * @param string $email     *     * @throws Exception     */    private function checkEmail($email)    {        $sql = "SELECT email FROM users WHERE email = ?";        $data = array($email);        $this->makeStatement($sql, $data);        $statement = $this->makeStatement($sql, $data);        //if a user with that e-mail is found in database        if ($statement->rowCount() === 1) {            //throw an exception > do NOT create new admin user            $e = new Exception("Error: '$email' already used!");            throw $e;        }    }    //check credential -> private    public function checkCredentials($username, $password)    {        $sql = "SELECT id FROM users WHERE username = ? AND hash_password =  MD5(?)";        $data = array($username, $password);        $statement = $this->makeStatement($sql, $data);        if ($statement->rowCount() === 1) {            $out = $statement->fetchObject();        } else {            $out = FALSE;        }        return $out;    }    //full name  -> public    //authenticate -> public    /**     * Return all users column id, username, first_name, last_name, email,  tip, status, time_stamp     * @return type     */    public function getAllUsers()    {        $sql = "SELECT id, username, first_name, last_name, email, tip, status FROM users ORDER BY time_stamp DESC";        return $this->makeStatement($sql);    }    //find one user by id -> public    public function getUser($id)    {        $sql = "SELECT id, username, first_name, last_name, email, tip, status FROM users WHERE id=?";        $data = array($id);        $statement = $this->makeStatement($sql, $data);        return $statement->fetchObject();    }    //last inserted id -> public}